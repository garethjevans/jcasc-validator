---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-crumb-issuer
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  crumb-issuer.yaml: |-
    jenkins:
      crumbIssuer:
        standard:
          excludeClientIPFromCrumb: true
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-jobs-settings
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  jobs-settings.yaml: |-
    jobs:
      - script: >
          def configuration = [
            [
              name        : "Core",
              repositories: "test-repo*",
              excludes    : "",
              trust       : "TrustContributors"
            ]
          ]
    
          configuration.each { jobConfig ->
            def config = [
              displayName: jobConfig.name,
              owner      : "garethjevans-test",
              excludes   : "",
              trust      : "TrustPermission"
            ] << jobConfig
    
            organizationFolder(config.name) {
              displayName(config.displayName)
              organizations {
                github {
                  repoOwner(config.owner)
                  apiUri("https://api.github.com")
                  credentialsId("github-access-token")
                }
              }
              projectFactories {
                workflowMultiBranchProjectFactory {
                  scriptPath("Jenkinsfile")
                }
              }
              configure { node ->
                def traits = node / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits
                traits << 'jenkins.scm.impl.trait.WildcardSCMSourceFilterTrait' {
                  includes(config.repositories)
                  excludes(config.excludes)
                }
                traits << 'jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait' {
                  includes('main')
                  excludes()
                }
                traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                  strategyId(1)
                }
                traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                  strategyId(1)
                }
                traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                  strategyId(1)
                  trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$' + config.trust)
                }
              }
            }
          }
      - script: >
          multibranchPipelineJob('ci.jenkins.io') {
            displayName "ci.jenkins.io"
            branchSources {
              github {
                id('2020120401')
                scanCredentialsId('github-access-token')
                repoOwner('garethjevans')
                repository('ci.jenkins.io')
              }
            }
            factory {
              workflowBranchProjectFactory {
                scriptPath('Jenkinsfile')
              }
            }
            configure { node ->
              def traits = node / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'
              traits << 'jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait' {
                includes('main')
                excludes()
              }
              traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                strategyId(1)
              }
              traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                strategyId(1)
              }
              traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                strategyId(1)
                trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustContributors')
              }
            }
          }
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-k8s-settings
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  k8s-settings.yaml: |-
    jenkins:
      clouds:
        - kubernetes:
            containerCapStr: "100"
            jenkinsTunnel: "cijenkinsio-agent:50000"
            jenkinsUrl: "http://cijenkinsio:8080"
            maxRequestsPerHostStr: "300"
            name: "kubernetes"
            namespace: "jenkins"
            podRetention: "Never"
            serverUrl: "https://kubernetes.default"
            podLabels:
              # Required to be jenkins/<helm-release>-jenkins-slave as definede here
              # https://github.com/helm/charts/blob/ef0d749132ecfa61b2ea47ccacafeaf5cf1d3d77/stable/jenkins/templates/jenkins-master-networkpolicy.yaml#L27
              - key: "jenkins/cijenkinsio-agent"
                value: "true"
            templates:
              - name: jnlp-linux
                nodeSelector: "kubernetes.io/os=linux"
                containers:
                  - name: jnlp
                    image: "jenkins/inbound-agent:latest-jdk11"
                    resourceLimitCpu: "500m"
                    resourceLimitMemory: "512Mi"
                    resourceRequestCpu: "500m"
                    resourceRequestMemory: "512Mi"
                    args: "^${computer.jnlpmac} ^${computer.name}"
                    alwaysPullImage: true
                yaml: |-
                  spec:
                    tolerations:
                    - key: "os"
                      operator: "Equal"
                      value: "windows"
                      effect: "NoSchedule"
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-location
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  location.yaml: |-
    unclassified:
      location:
        adminAddress: "nobody@jenkins.io"
        url: "https://ci.jenkins.io"
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-markup-formatter
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  markup-formatter.yaml: |-
    jenkins:
      markupFormatter:
        rawHtml:
          disableSyntaxHighlighting: false
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-matrix-settings
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  matrix-settings.yaml: |-
    jenkins:
      authorizationStrategy:
        globalMatrix:
          permissions:
            - "Overall/Administer:admin"
            - "Overall/SystemRead:authenticated"
            - "Overall/Read:authenticated"
            - "Agent/ExtendedRead:authenticated"
            - "Job/ExtendedRead:authenticated"
            - "Overall/Read:anonymous"
            - "Job/Read:anonymous"
            - "View/Read:anonymous"
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-misc-jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  misc-jenkins.yaml: |-
    jenkins:
      remotingSecurity:
        enabled: true
      slaveAgentPort: 50000
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-misc-security
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  misc-security.yaml: |-
    security:
      apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-misc-unclassified
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  misc-unclassified.yaml: |-
    unclassified:
      appInsightsGlobalConfig:
        appInsightsEnabled: false
      gitSCM:
        createAccountBasedOnEmail: false
        globalConfigEmail: "oscar@example.com"
        globalConfigName: "oscar"
      pipeline-model-docker:
        dockerLabel: "docker"
      pollSCM:
        pollingThreadCount: 10
      timestamper:
        allPipelines: true
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-no-executors
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  no-executors.yaml: |-
    jenkins:
      numExecutors: 0
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-pipeline-library
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  pipeline-library.yaml: |-
    unclassified:
      globalLibraries:
        libraries:
          - defaultVersion: "master"
            implicit: true
            name: "pipeline-library"
            retriever:
              modernSCM:
                scm:
                  git:
                    id: "github-access-token"
                    remote: "https://github.com/jenkins-infra/pipeline-library.git"
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-security-realm
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  security-realm.yaml: |-
    jenkins:
      securityRealm:
        local:
          allowsSignup: false
          users:
            - id: "admin"
              password: ""
---
# Source: cijenkinsio/charts/jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-jenkins-config-system-message
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-3.0.8"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  system-message.yaml: |-
    jenkins:
      systemMessage: |
        <div>
          <h1>About ci.jenkins.io</h1>
          <p>This instance hosts several <a href="https://plugins.jenkins.io/github-branch-source">GitHub Organization folders</a> organized by subject area.</p>
          <p>To add continuous integration and PR builds for a Jenkins plugin in the <code>jenkinsci</code> organization,
          just add a <a href="https://jenkins.io/doc/book/pipeline/jenkinsfile/"><code>Jenkinsfile</code></a> to your repository.
          You'll likely only need one line:</p>
          <pre>    buildPlugin()</pre>
          <p>Learn more:</p>
          <ul>
            <li><a href="https://jenkins.io/projects/infrastructure/#jenkins">About the Jenkins infrastructure project</a></li>
            <li><a href="https://github.com/jenkins-infra/documentation/blob/master/ci.adoc#jenkins-on-jenkins">Infrastructure documentation: ci.jenkins.io</a></li>
            <li><a href="https://github.com/jenkins-infra/pipeline-library#pipeline-global-library">Infrastructure documentation: Pipeline library</a></li>
            <li><a href="https://github.com/jenkins-infra/charts/blob/master/config/cijenkinsio/jenkins.yaml">configuration-as-code for ci.jenkins.io</a></li>
          </ul>
        </div>
